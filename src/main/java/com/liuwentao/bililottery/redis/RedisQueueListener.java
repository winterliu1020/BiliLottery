package com.liuwentao.bililottery.redis;/** * Created by liuwentao on 2021/9/26 14:06 * * 消息队列的监听器：就是给每一个消费者分配的线程，只要容器还在跑，这个线程就会一直去消息队列中lPop获得消息进行消费 */import com.liuwentao.bililottery.Configuration.SpringApplicationContextHolder;import com.liuwentao.bililottery.Service.IGlobalCache;import com.liuwentao.bililottery.mappers.PostLotteryMapper;import lombok.extern.slf4j.Slf4j;@Slf4jpublic class RedisQueueListener implements Runnable {//    private final Long WAITTIME = 30L;    private RedisQueueConsumer redisQueueConsumer;    IGlobalCache iGlobalCache;    public RedisQueueListener(RedisQueueConsumer redisQueueConsumer) {        this.redisQueueConsumer = redisQueueConsumer;    }    @Override    public void run() {        iGlobalCache = SpringApplicationContextHolder.getBean(IGlobalCache.class);        log.info("redis监听器开始监听:{}", redisQueueConsumer.getQueueName());        while (RedisQueueConsumerContainer.isRun) {            try {                Object object = iGlobalCache.bRPop(redisQueueConsumer.getQueueName()); // 要指明去哪一个消息队列中lPop出消息                if (object != null) {                    log.info("监听到一条生产的消息：" + object);                    redisQueueConsumer.getMessage(object.toString());                }            } catch (Exception e) {                e.printStackTrace();                log.info("redis监听器错误：{}", redisQueueConsumer.getQueueName());            }        }    }}