package com.liuwentao.bililottery.ServiceImpl;/** * Created by liuwentao on 2021/9/19 18:19 */import com.liuwentao.bililottery.Service.IGlobalCache;import lombok.AllArgsConstructor;import lombok.Getter;import org.springframework.data.redis.core.RedisTemplate;import org.springframework.util.CollectionUtils;import java.util.*;import java.util.concurrent.TimeUnit;/** * @description: 移动端Redis缓存实现类 * @author: YuXD * @create: 2021-01-05 10:40 **/@Getter@AllArgsConstructorpublic final class AppRedisCacheManager implements IGlobalCache {    private RedisTemplate<String, Object> redisTemplate;    @Override    public Object bRPop(String queueName) {        return redisTemplate.opsForList().rightPop(queueName);    }    @Override    public Long bLPush(String queueName, Object object) {        return redisTemplate.opsForList().leftPush(queueName, object);    }    @Override    public boolean expire(String key, long time) {        try {            if (time > 0) {                redisTemplate.expire(key, time, TimeUnit.SECONDS);            }            return true;        } catch (Exception e) {            e.printStackTrace();            return false;        }    }    @Override    public long getExpire(String key) {        return redisTemplate.getExpire(key, TimeUnit.SECONDS);    }    @Override    public boolean hasKey(String key) {        try {            return redisTemplate.hasKey(key);        } catch (Exception e) {            e.printStackTrace();            return false;        }    }    @Override    @SuppressWarnings("unchecked")    public void del(String... key) {        if (key != null && key.length > 0) {            if (key.length == 1) {                redisTemplate.delete(key[0]);            } else {                List<String> list = new ArrayList<String>(key.length);                Collections.addAll(list, key);                redisTemplate.delete(list);            }        }    }    @Override    public Object get(String key) {        return key == null ? null : redisTemplate.opsForValue().get(key);    }    @Override    public boolean set(String key, Object value) {        try {            redisTemplate.opsForValue().set(key, value);            return true;        } catch (Exception e) {            e.printStackTrace();            return false;        }    }    @Override    public boolean set(String key, Object value, long time) {        try {            if (time > 0) {                redisTemplate.opsForValue().set(key, value, time, TimeUnit.SECONDS);            } else {                set(key, value);            }            return true;        } catch (Exception e) {            e.printStackTrace();            return false;        }    }    @Override    public long incr(String key, long delta) {        if (delta < 0) {            throw new RuntimeException("递增因子必须大于0");        }        return redisTemplate.opsForValue().increment(key, delta);    }    @Override    public long decr(String key, long delta) {        if (delta < 0) {            throw new RuntimeException("递减因子必须大于0");        }        return redisTemplate.opsForValue().increment(key, -delta);    }    @Override    public Object hget(String key, String item) {        return redisTemplate.opsForHash().get(key, item);    }    @Override    public Map<Object, Object> hmget(String key) {        return redisTemplate.opsForHash().entries(key);    }    @Override    public boolean hmset(String key, Map<String, Object> map) {        try {            redisTemplate.opsForHash().putAll(key, map);            return true;        } catch (Exception e) {            e.printStackTrace();            return false;        }    }    @Override    public boolean hmset(String key, Map<String, Object> map, long time) {        try {            redisTemplate.opsForHash().putAll(key, map);            if (time > 0) {                expire(key, time);            }            return true;        } catch (Exception e) {            e.printStackTrace();            return false;        }    }    @Override    public boolean hset(String key, String item, Object value) {        try {            redisTemplate.opsForHash().put(key, item, value);            return true;        } catch (Exception e) {            e.printStackTrace();            return false;        }    }    @Override    public boolean hset(String key, String item, Object value, long time) {        try {            redisTemplate.opsForHash().put(key, item, value);            if (time > 0) {                expire(key, time);            }            return true;        } catch (Exception e) {            e.printStackTrace();            return false;        }    }    @Override    public void hdel(String key, Object... item) {        redisTemplate.opsForHash().delete(key, item);    }    @Override    public boolean hHasKey(String key, String item) {        return redisTemplate.opsForHash().hasKey(key, item);    }    @Override    public double hincr(String key, String item, double by) {        return redisTemplate.opsForHash().increment(key, item, by);    }    @Override    public double hdecr(String key, String item, double by) {        return redisTemplate.opsForHash().increment(key, item, -by);    }    @Override    public Set<Object> sGet(String key) {        try {            return redisTemplate.opsForSet().members(key);        } catch (Exception e) {            e.printStackTrace();            return null;        }    }    @Override    public boolean sHasKey(String key, Object value) {        try {            return redisTemplate.opsForSet().isMember(key, value);        } catch (Exception e) {            e.printStackTrace();            return false;        }    }    @Override    public long sSet(String key, Object... values) {        try {            return redisTemplate.opsForSet().add(key, values);        } catch (Exception e) {            e.printStackTrace();            return 0;        }    }    @Override    public long sSetAndTime(String key, long time, Object... values) {        try {            Long count = redisTemplate.opsForSet().add(key, values);            if (time > 0) {                expire(key, time);            }            return count;        } catch (Exception e) {            e.printStackTrace();            return 0;        }    }    @Override    public long sGetSetSize(String key) {        try {            return redisTemplate.opsForSet().size(key);        } catch (Exception e) {            e.printStackTrace();            return 0;        }    }    @Override    public long setRemove(String key, Object... values) {        try {            Long count = redisTemplate.opsForSet().remove(key, values);            return count;        } catch (Exception e) {            e.printStackTrace();            return 0;        }    }    @Override    public List<Object> lGet(String key, long start, long end) {        try {            return redisTemplate.opsForList().range(key, start, end);        } catch (Exception e) {            e.printStackTrace();            return null;        }    }    @Override    public long lGetListSize(String key) {        try {            return redisTemplate.opsForList().size(key);        } catch (Exception e) {            e.printStackTrace();            return 0;        }    }    @Override    public Object lGetIndex(String key, long index) {        try {            return redisTemplate.opsForList().index(key, index);        } catch (Exception e) {            e.printStackTrace();            return null;        }    }    @Override    public boolean lSetAll(String key, List<Object> value) {        try {            redisTemplate.opsForList().leftPushAll(key, value);            return true;        } catch (Exception e) {            e.printStackTrace();            return false;        }    }    @Override    public boolean lSet(String key, Object value) {        try {            redisTemplate.opsForList().leftPushIfPresent(key, value);            return true;        } catch (Exception e) {            e.printStackTrace();            return false;        }    }    @Override    public boolean lSet(String key, Object value, long time) {        try {            redisTemplate.opsForList().leftPush(key, value);            if (time > 0) {                expire(key, time);            }            return true;        } catch (Exception e) {            e.printStackTrace();            return false;        }    }    @Override    public boolean lSetAll(String key, List<Object> value, long time) {        try {            redisTemplate.opsForList().leftPushAll(key, value);            if (time > 0)                expire(key, time);            return true;        } catch (Exception e) {            e.printStackTrace();            return false;        }    }    @Override    public boolean rSet(String key, Object value) {        try {            redisTemplate.opsForList().rightPush(key, value);            return true;        } catch (Exception e) {            e.printStackTrace();            return false;        }    }    @Override    public boolean rSet(String key, Object value, long time) {        try {            redisTemplate.opsForList().rightPush(key, value);            if (time > 0) {                expire(key, time);            }            return true;        } catch (Exception e) {            e.printStackTrace();            return false;        }    }    @Override    public boolean rSetAll(String key, List<Object> value) {        try {            redisTemplate.opsForList().rightPushAll(key, value);            return true;        } catch (Exception e) {            e.printStackTrace();            return false;        }    }    @Override    public boolean rSetAll(String key, List<Object> value, long time) {        try {            redisTemplate.opsForList().rightPushAll(key, value);            if (time > 0)                expire(key, time);            return true;        } catch (Exception e) {            e.printStackTrace();            return false;        }    }    @Override    public boolean lUpdateIndex(String key, long index, Object value) {        try {            redisTemplate.opsForList().set(key, index, value);            return true;        } catch (Exception e) {            e.printStackTrace();            return false;        }    }    @Override    public long lRemove(String key, long count, Object value) {        try {            Long remove = redisTemplate.opsForList().remove(key, count, value);            return remove;        } catch (Exception e) {            e.printStackTrace();            return 0;        }    }    @Override    public void rangeRemove(String key, Long stard, Long end) {        try {            redisTemplate.opsForList().trim(key, stard, end);        } catch (Exception e) {            e.printStackTrace();        }    }}