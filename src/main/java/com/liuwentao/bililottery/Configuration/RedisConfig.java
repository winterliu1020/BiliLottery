package com.liuwentao.bililottery.Configuration;/** * Created by liuwentao on 2021/9/19 18:09 */import com.fasterxml.jackson.annotation.JsonAutoDetect;import com.fasterxml.jackson.annotation.JsonInclude;import com.fasterxml.jackson.annotation.JsonTypeInfo;import com.fasterxml.jackson.annotation.PropertyAccessor;import com.fasterxml.jackson.databind.DeserializationFeature;import com.fasterxml.jackson.databind.MapperFeature;import com.fasterxml.jackson.databind.ObjectMapper;import com.fasterxml.jackson.databind.SerializationFeature;import com.liuwentao.bililottery.Service.IGlobalCache;import com.liuwentao.bililottery.ServiceImpl.AppRedisCacheManager;import org.springframework.beans.factory.annotation.Value;import org.springframework.boot.context.properties.ConfigurationProperties;import org.springframework.cache.annotation.EnableCaching;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.context.annotation.Primary;import org.springframework.data.redis.cache.RedisCacheConfiguration;import org.springframework.data.redis.cache.RedisCacheManager;import org.springframework.data.redis.cache.RedisCacheWriter;import org.springframework.data.redis.connection.RedisConnectionFactory;import org.springframework.data.redis.connection.RedisStandaloneConfiguration;import org.springframework.data.redis.connection.jedis.JedisClientConfiguration;import org.springframework.data.redis.connection.jedis.JedisConnectionFactory;import org.springframework.data.redis.core.RedisTemplate;import org.springframework.data.redis.serializer.*;import redis.clients.jedis.JedisPoolConfig;@EnableCaching@Configurationpublic class RedisConfig {    @Value("${spring.redis.host}")    private String host;    @Value("${spring.redis.database}")    private Integer database;    @Value("${spring.redis.port}")    private Integer port;    @Value("${spring.redis.password}")    private String pwd;    @Primary    @Bean(name = "jedisPoolConfig")    @ConfigurationProperties(prefix = "spring.redis.pool")    public JedisPoolConfig jedisPoolConfig() {        JedisPoolConfig jedisPoolConfig = new JedisPoolConfig();        jedisPoolConfig.setMaxWaitMillis(10000);        return jedisPoolConfig;    }    @Bean    public RedisConnectionFactory redisConnectionFactory(JedisPoolConfig jedisPoolConfig) {        RedisStandaloneConfiguration redisStandaloneConfiguration = new RedisStandaloneConfiguration();        redisStandaloneConfiguration.setHostName(host);        redisStandaloneConfiguration.setDatabase(database);        redisStandaloneConfiguration.setPassword(pwd);        redisStandaloneConfiguration.setPort(port);        JedisClientConfiguration.JedisPoolingClientConfigurationBuilder jpcb = (JedisClientConfiguration.JedisPoolingClientConfigurationBuilder) JedisClientConfiguration.builder();        jpcb.poolConfig(jedisPoolConfig);        JedisClientConfiguration jedisClientConfiguration = jpcb.build();        return new JedisConnectionFactory(redisStandaloneConfiguration, jedisClientConfiguration);    }    private Jackson2JsonRedisSerializer<Object> jackson2JsonRedisSerializer() {        Jackson2JsonRedisSerializer<Object> jackson2JsonRedisSerializer =                new Jackson2JsonRedisSerializer<>(Object.class);        ObjectMapper objectMapper = new ObjectMapper();        objectMapper.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);        objectMapper.configure(MapperFeature.USE_ANNOTATIONS, false);        objectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);        objectMapper.configure(SerializationFeature.FAIL_ON_EMPTY_BEANS, false);        // 此项必须配置，否则会报java.lang.ClassCastException: java.util.LinkedHashMap cannot be cast to XXX        objectMapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL, JsonTypeInfo.As.PROPERTY);        objectMapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);        jackson2JsonRedisSerializer.setObjectMapper(objectMapper);        return jackson2JsonRedisSerializer;    }    @Bean    public RedisCacheManager redisCacheManager(RedisConnectionFactory connectionFactory){        //初始化一个RedisCacheWriter输出流        RedisCacheWriter redisCacheWriter = RedisCacheWriter.nonLockingRedisCacheWriter(connectionFactory);        //采用Jackson2JsonRedisSerializer序列化机制//        Jackson2JsonRedisSerializer<Object> serializer = new Jackson2JsonRedisSerializer<Object>(Object.class);        //创建一个RedisSerializationContext.SerializationPair给定的适配器pair        RedisSerializationContext.SerializationPair<Object> pair = RedisSerializationContext.SerializationPair.fromSerializer(jackson2JsonRedisSerializer());        //创建CacheConfig        RedisCacheConfiguration defaultCacheConfig = RedisCacheConfiguration.defaultCacheConfig().serializeValuesWith(pair);        return new RedisCacheManager(redisCacheWriter, defaultCacheConfig);    }    /**     * 配置redisTemplate针对不同key和value场景下不同序列化的方式     *     * @param factory Redis连接工厂     * @return     */    @Primary    @Bean(name = "redisTemplate")    public RedisTemplate<String, Object> redisTemplate(RedisConnectionFactory factory) {        RedisTemplate<String, Object> redisTemplate = new RedisTemplate<>();        redisTemplate.setConnectionFactory(factory);        //Use Jackson 2Json RedisSerializer to serialize and deserialize the value of redis (default JDK serialization)        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = new Jackson2JsonRedisSerializer(Object.class);        ObjectMapper objectMapper = new ObjectMapper();        objectMapper.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);        //将类名称序列化到json串中，去掉会导致得出来的的是LinkedHashMap对象，直接转换实体对象会失败        objectMapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);        //设置输入时忽略JSON字符串中存在而Java对象实际没有的属性        objectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);        jackson2JsonRedisSerializer.setObjectMapper(objectMapper);        //Use String RedisSerializer to serialize and deserialize the key value of redis        RedisSerializer redisSerializer = new StringRedisSerializer();        //key        redisTemplate.setKeySerializer(redisSerializer);        redisTemplate.setHashKeySerializer(redisSerializer);        //value        redisTemplate.setValueSerializer(jackson2JsonRedisSerializer);        redisTemplate.setHashValueSerializer(jackson2JsonRedisSerializer);        redisTemplate.afterPropertiesSet();        return redisTemplate;    }    @Bean    IGlobalCache cache(RedisTemplate redisTemplate) {        return new AppRedisCacheManager(redisTemplate);    }}