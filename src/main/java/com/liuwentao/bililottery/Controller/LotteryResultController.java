package com.liuwentao.bililottery.Controller;import com.liuwentao.bililottery.Entity.LotteryResult;import com.liuwentao.bililottery.Entity.LotteryResultAndPrizeName;import com.liuwentao.bililottery.Entity.LotteryResultWrapper;import com.liuwentao.bililottery.Entity.PostLottery;import com.liuwentao.bililottery.Service.IGlobalCache;import com.liuwentao.bililottery.Service.LotteryResultService;import com.liuwentao.bililottery.Service.PostLotteryService;import com.liuwentao.bililottery.util.ResultWrapper;import lombok.extern.slf4j.Slf4j;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.bind.annotation.ResponseBody;import java.util.ArrayList;import java.util.List;/** * Created by liuwentao on 2021/9/18 19:00 */@Slf4j@Controller@ResponseBodypublic class LotteryResultController {    // getLotteryResult  OpenIdAndPatternId    @Autowired    PostLotteryService postLotteryService;    @Autowired    IGlobalCache iGlobalCache;    @Autowired    LotteryResultService lotteryResultService;    // 前端需要传patternId；同时没登录无法查询，所以必须在http请求头中放入授权的session；然后根据session去获得这个人的openId，然后通过openId和patternId查找该次抽奖的结果    @RequestMapping(value = "/api/getLotteryResult", method = RequestMethod.POST)    public ResultWrapper<LotteryResultWrapper> getLotteryResult(@RequestParam("session") String session, @RequestParam("id") String id) {        // 根据session去微信服务器端获取openId        if (!iGlobalCache.hasKey(session)) {            return ResultWrapper.<LotteryResultWrapper>builder().code(3).count(0).msg("session过期，请先登录").build();        }        String openId = iGlobalCache.get(session).toString();        // 通过openId，id获取这个人发起的这次抽奖的设置信息        log.info("----" + session + "   " + id);        PostLottery postLottery = postLotteryService.findPostLotteryByOpenIdAndId(openId, id);        postLottery.setOpenId("");        log.info("查找到的抽奖设置信息：" + postLottery);        List<LotteryResult> allLotteryResultList= lotteryResultService.findLotteryResultByOpenIdAndPatternId(openId, id); // 中奖名单        log.info("总的中奖名单：" + allLotteryResultList.toString());        // 如果当下还未开奖        if (allLotteryResultList.size() == 0) {            // 还未开奖            return ResultWrapper.<LotteryResultWrapper>builder().code(0).count(allLotteryResultList.size()).data(LotteryResultWrapper.builder().lotteryResultAndPrizeNameList(new ArrayList<>()).postLottery(postLottery).build()).msg(postLottery.getOut()).build();        }        int index = 0; // 指向总的中奖list的索引        // 对抽到的评论分类到对应的奖项中        ArrayList<LotteryResultAndPrizeName> result = new ArrayList<>();        String[] lines = postLottery.getPrizeNotes().split("\\r?\\n");        for (int i = 0; i < lines.length; i++) {            String line = lines[i];            String[] prizeNameAndCount = line.split("，");            log.info("各行数据：" + prizeNameAndCount[0] + " " + prizeNameAndCount[1]);            LotteryResultAndPrizeName lotteryResultAndPrizeName = LotteryResultAndPrizeName.builder().prizeName(prizeNameAndCount[0]).build(); // 设置奖项名称            ArrayList<LotteryResult> lotteryResultForOnePrize = new ArrayList<>();            for (int j = 0; j < Integer.parseInt(prizeNameAndCount[1]) && index < allLotteryResultList.size(); j++) {                lotteryResultForOnePrize.add(allLotteryResultList.get(index));                index++;            }            lotteryResultAndPrizeName.setLotteryResult(lotteryResultForOnePrize); // 设置该项奖项的中奖名单            result.add(lotteryResultAndPrizeName);        }        LotteryResultWrapper lotteryResultWrapper = LotteryResultWrapper.builder().postLottery(postLottery).lotteryResultAndPrizeNameList(result).build();        return ResultWrapper.<LotteryResultWrapper>builder().code(0).count(allLotteryResultList.size()).data(lotteryResultWrapper).msg(postLottery.getOut()).build();    }}