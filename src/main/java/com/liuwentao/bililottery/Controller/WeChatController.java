package com.liuwentao.bililottery.Controller;import com.alibaba.fastjson.JSON;import com.liuwentao.bililottery.Entity.UserModel;import com.liuwentao.bililottery.Entity.WeChatRequest;import com.liuwentao.bililottery.Service.IGlobalCache;import com.liuwentao.bililottery.Service.UserService;import com.liuwentao.bililottery.util.EmptyUtil;import com.liuwentao.bililottery.util.ResultWrapper;import lombok.extern.slf4j.Slf4j;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.http.HttpMethod;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.stereotype.Controller;import org.springframework.util.DigestUtils;import org.springframework.web.bind.annotation.PostMapping;import org.springframework.web.bind.annotation.RequestBody;import org.springframework.web.bind.annotation.ResponseBody;import org.springframework.web.client.RestTemplate;import java.util.Date;import java.util.Map;/** * Created by liuwentao on 2021/9/12 20:21 */@Slf4j@Controller@ResponseBodypublic class WeChatController {    //在开发者平台中获取APPID和APPSECRET    private static final String APPID= "wx3ebe4f69863c90ba";    private static final String APPSECRET = "656697d2e39a24a15b78f87de1e93c05";    @Autowired    UserService userService;    @Autowired    IGlobalCache iGlobalCache;    @PostMapping("/login")    public ResultWrapper login(@RequestBody WeChatRequest weChatRequest){        System.out.println("小程序登录传来的数据：" + weChatRequest.toString());        //微信服务器的接口路径        String url = "https://api.weixin.qq.com/sns/jscode2session?appid="+APPID+ "&secret="+APPSECRET+"&js_code="+ weChatRequest.getCode() +"&grant_type=authorization_code";        RestTemplate restTemplate = new RestTemplate();        //进行网络请求,访问微信服务器接口        ResponseEntity<String> responseEntity = restTemplate.exchange(url, HttpMethod.GET, null, String.class);        //根据返回值进行后续操作        System.out.println("请求微信服务器接口数据：" + responseEntity);        String sessionData = responseEntity.getBody();        System.out.println("用code向微信服务器端请求得到的sessionData:" + sessionData);        //将json字符串转化为实体类;        Map weChatSession = JSON.parseObject(sessionData);        if(responseEntity.getStatusCode() == HttpStatus.OK) {            //获取用户的唯一标识            String openId = weChatSession.get("openid").toString();            //获取会话秘钥（具有时效性，用户登录的临时通行证）            String session_key = weChatSession.get("session_key").toString();            // [key: openId, value: session_key 和 md5] 保存到redis，并设置过期时间；同时还需要用openId去数据库查一下是否该用户已注册，没有注册则需要把新用户数据存到mysql            String sessionMd5Str = DigestUtils.md5DigestAsHex((openId + new Date()).getBytes());            // 通过session查找openId            iGlobalCache.set(sessionMd5Str, openId, 24 * 60 * 60); // 每个session时限5分钟            // 根据得到的该用户的openid来验证登录; 通过openid向数据库中查询是否存在对应用户            UserModel user = userService.findUserByOpenId(openId);            if(EmptyUtil.isEmpty(user)){                System.out.println("当前用户不存在，创建一个新用户");                UserModel aNewUser = UserModel.builder().openId(openId).avatarUrl(weChatRequest.getAvatarUrl()).nickName(weChatRequest.getNickName()).build();                System.out.println("aNewUser:" + aNewUser.toString());                boolean flag = userService.insertUser(aNewUser);                if(flag == true){                    log.info("成功插入一个新用户");                    return ResultWrapper.success(sessionMd5Str, "登录成功");                } else {                    return ResultWrapper.error(1,"登录失败");                }            } else{                log.info("用户存在，返回成功" + user);                return ResultWrapper.success(sessionMd5Str, "登录成功");            }        } else {            //获取错误码            String errcode = weChatSession.get("errcode").toString();            //获取错误信息            String errmsg = weChatSession.get("errmsg").toString();//            if (!"0".equals(errcode)) {////            }            // 这里根据不同的code还可以做相应的措施            return ResultWrapper.error(1, "登录失败，errcode:" + errcode + "，errmsg:" + errmsg);        }    }}